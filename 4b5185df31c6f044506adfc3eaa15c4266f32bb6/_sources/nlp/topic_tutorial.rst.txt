.. _topic_tutorial:

====================================
Topic Prediction API Tutorial
====================================

This tutorial will walk through how to use the Topic Extraction API for meeting analytics.

.. contents:: Table of Contents
    :local:
    :depth: 3

The deployed version of the topic extraction API is hosted at ``https://seachat-backstage.seasalt.ai/topics``.

All of the following API calls can be viewed and tested with the `Swagger docs <https://seachat-backstage.seasalt.ai/topics/docs#/>`_ for this API.

The current topic extraction models are stored in the Azure fileshare at ``/mnt/models/nlp/topic_extraction``.


Multilingual Support
====================

By default, the Topic Extraction API will extract topics in English. The Topic Extraction API currently supports the following languages: English, Traditional Chinese, Simplified Chinese, Indonesian, Javanese, Malay, Tagalog, and Vietnamese. 

All API calls for each language include a language code in the URL.

The language codes for supported languages are the following:

====================  =====
Language              Code
====================  =====
English               en-XX
Traditional Chinese   zh-TW
Simplified Chinese    zh-CN
Indonesian            id-XX
Javanese              jv-XX
Malay                 ms-XX
Tagalog               tl-XX
Vietnamese            vi-XX
====================  =====


Topic Extraction
================

The topic extraction task uses a combination of abstractive and extractive approaches. Abstractive refers to a text classification approach, where each input is classified into a set of labels seen during training. Extractive refers to a keyphrase search approach where relevant keyphrases are returned as topics.

POST /extract
--------------

To get the topics for an input, the process is called with a POST request to the ``extract`` endpoint:

.. code-block:: bash

    POST https://seachat-backstage.seasalt.ai/topics/{lang_code}/extract


This request takes a path parameter ``{lang_code}``. Your choice of language code from the table above replaces the curly braces. By default, the language code is set to ``en-US``.


The required request body for topic extraction is as follows:

.. code-block:: JSON

    {
        "data": [
            {
            "sequence": 0,
            "transcription": "string",
            "wav_id": "string",
            "anchor_start": 0,
            "duration": 0,
            "verified_transcription": "string",
            "is_verified": true,
            "summarization": "The COVID-19 pandemic, also known as the coronavirus pandemic, is an ongoing global pandemic of coronavirus disease 2019 (COVID-19) caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2).",
            "trans_type": "string",
            "speaker": [
                "string"
            ]
            }
        ],
        "url": "http://127.0.0.0"
    }

.. IMPORTANT:: The reason for having such a verbose request body is to maintain consistency between the input provided from the backend. Note that we have a value each for the ``"summarization"`` and ``"url"`` fields. Other fields are set to default. 

We populate the ``"summarization"`` field, not ``"transcription"``, which may be unintuitive. The reason for doing this is because the topic extraction approach relies on summarization of meeting transcript to ensure well-formedness. The topic extraction models are trained on well-formed input (coherent utterances). Speech-to-text may result in noisy input, so we strive to provide a sanitized input to the topic extraction API as much as possible.

The ``url`` field is where callback URL is specified. This URL is used when the API is ready to send its output to the person who submitted a topic extraction request.

A successful response will return the following message:

.. code-block:: bash
    
    {'message': 'Topic extraction process started.'}

The output of topic extraction is sent to the front end where users will be able to see the topics in the user interface.

To test that callback is working properly, start the callback API by running the following command in ``SeaWord/topic_extraction/routers``:

.. code-block:: bash

    uvicorn callback_test:callback_test --port 8888

In another terminal, start the topic extraction API by running the following command in ``SeaWord/topic_extraction``: 

.. code-block:: bash

    uvicorn main:app --port 5003 --host 0.0.0.0

It will take some time for the models to load. Once the application startup is complete, you'll see the following message:

.. code-block:: bash

    INFO:     Application startup complete.

Send a request using a curl request as follows:

.. code-block:: bash

    curl -X POST http://0.0.0.0:5003/en-US/extract -H 'Content-Type: application/json' -d '{
        "url": "http://127.0.0.1:8888",
        "data": [{"summarization": "The COVID-19 pandemic, also known as the coronavirus pandemic, is an ongoing global pandemic of coronavirus disease 2019 (COVID-19) caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2).", 
                  "transcription": "string"
                 }
                ]
    }'

You can modify the ``"summarization"`` and ``"transcription"`` fields, but they cannot be empty. The value of the ``"summarization"`` field will be the input to topic extraction, so make sure the input you want to test is placed in ``"summarization"``. You can also change the language code in ``http://0.0.0.0:5003/extract/en-US``. Notice that the ``"url"`` field is set to the port specified when you start the callback API.

If the process is successful, the following logs will appear in the same terminal as the one you used to start the topic extraction API:

.. code-block:: bash

    INFO: | 2021-05-26 19:58:15,567 | topic_api.py:start_topic_extraction_process | Extraction task added to queue.
    INFO: 127.0.0.1:38702 - "POST /en-US/extract HTTP/1.1" 202 Accepted
    INFO: | 2021-05-26 19:58:15,570 | topic_api.py:topic_predict_callback | Sending callback request to http://127.0.0.1:8888
    INFO: | 2021-05-26 19:58:15,570 | topic_api.py:extract | Language code: en-XX
    INFO: | 2021-05-26 19:58:15,570 | topic_api.py:extract | Extracting topics
    INFO: | 2021-05-26 19:58:15,639 | topic_api.py:extract | Predictions from fastText: ['london', 'sanfrancisco', 'unitedstates', 'usa', 'berlin', 'BusinessPerson', 'Theatre', 'Weapon', 'Outbreak']
    INFO:fastapi:Predictions from fastText: ['london', 'sanfrancisco', 'unitedstates', 'usa', 'berlin', 'BusinessPerson', 'Theatre', 'Weapon', 'Outbreak']
    /home/vsoesanto/anaconda/lib/python3.8/site-packages/torch/distributions/distribution.py:44: UserWarning: <class 'torch_struct.distributions.TreeCRF'> does not define arg_constraints. Please set arg_constraints = {} or initialize the distribution with validate_args=False to turn off validation.
    warnings.warn(f'{self.class} does not define arg_constraints. ' +
    INFO: | 2021-05-26 19:58:15,804 | topic_api.py:extract | Predictions from RAKE: ['coronavirus disease 2019', 'ongoing global pandemic', 'coronavirus pandemic']
    INFO:fastapi:Predictions from RAKE: ['coronavirus disease 2019', 'ongoing global pandemic', 'coronavirus pandemic']
    INFO: | 2021-05-26 19:58:16,081 | topic_api.py:extract | Predictions from KeyBERT: ['coronavirus pandemic', 'coronavirus disease']
    INFO:fastapi:Predictions from KeyBERT: ['coronavirus pandemic', 'coronavirus disease']
    INFO: | 2021-05-26 19:58:16,082 | topic_api.py:extract | Final predictions: ['london', 'sanfrancisco', 'unitedstates', 'usa', 'berlin', 'BusinessPerson', 'Theatre', 'Weapon', 'Outbreak', 'coronavirus pandemic', 'coronavirus disease', 'coronavirus disease 2019', 'ongoing global pandemic', 'coronavirus pandemic']
    INFO:fastapi:Final predictions: ['london', 'sanfrancisco', 'unitedstates', 'usa', 'berlin', 'BusinessPerson', 'Theatre', 'Weapon', 'Outbreak', 'coronavirus pandemic', 'coronavirus disease', 'coronavirus disease 2019', 'ongoing global pandemic', 'coronavirus pandemic']
    INFO: | 2021-05-26 19:58:16,109 | topic_api.py:topic_predict_callback | Callback succeeded. Code: 200
    INFO:fastapi:Callback succeeded. Code: 200


In addition, there should be a file ``results.json`` in ``SeaWord/topic_extraction/routers`` that contains the response from topic extraction.

When using the ``extract`` endpoint, we do not have to wait for topic extraction results when we send a request. We let the API process the input without having to worry about the request timing out. Once all the data is processed, the API sends its own request to the callback URL that it was given in the original request (i.e. it sends a request back to us with the topic extraction results)

On the other hand, when using the ``demo`` endpoint, we have to wait for topic extraction to generate results. See below for instructions on using the ``demo`` endpoint.

POST /extract_no_callback
--------------------------

In order to see the full topics returned without accesing the ngMeeting user interface, we send a POST request to the ``extract_no_callback`` endpoint:

.. code-block:: bash

    POST https://seachat-backstage.seasalt.ai/topics/{lang_code}/extract_no_callback


Similarly, the choice of language code from the table above replaces the curly braces. By default, the language code is set to ``en-US``.

The required request body for topic extraction is the same as shown above. For completion, it is as follows:

.. code-block:: JSON

    {
        "data": [
            {
            "sequence": 0,
            "transcription": "string",
            "wav_id": "string",
            "anchor_start": 0,
            "duration": 0,
            "verified_transcription": "string",
            "is_verified": true,
            "summarization": "The COVID-19 pandemic, also known as the coronavirus pandemic, is an ongoing global pandemic of coronavirus disease 2019 (COVID-19) caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2).",
            "trans_type": "string",
            "speaker": [
                "string"
            ]
            }
        ],
        "url": "http://127.0.0.0"
    }

A successful response will have the following output:

.. code-block:: JSON
    
    {
        "RAKE": {
            "keywords": [
            "coronavirus disease 2019",
            "ongoing global pandemic",
            "coronavirus pandemic"
            ]
        },
        "BERT": {
            "keywords": [
            "coronavirus pandemic",
            "coronavirus disease"
            ]
        },
        "topics": {
            "transcript": "The COVID-19 pandemic, also known as the coronavirus pandemic, is an ongoing global pandemic of coronavirus disease 2019 (COVID-19) caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2).",
            "topics": [
            "sanfrancisco",
            "usa",
            "london",
            "berlin",
            "australia",
            "BusinessPerson",
            "Weapon",
            "Outbreak",
            "coronavirus pandemic",
            "coronavirus disease",
            "coronavirus disease 2019",
            "ongoing global pandemic",
            "coronavirus pandemic"
            ]
        }
    }


POST /extract_live
-------------------

In cases where we want to get live results and process a transcript piece by piece, we can use the ``/extract_live`` endpoint.
Instead of an entire meeting transcript, this endpoint accepts a single transcription segment in the following format:

.. code-block:: JSON

    {
        "command": Text,
        "meeting_id": Text,
        "sequence": int,
        "account_id": Text,
        "timestamp": Text,
        "speaker": Text,
        "transcription": Text,
        "voice_start_time": float,
        "voice_duration": float,
        "type": Text,
        "callback_url": HttpUrl
    }

The topic extraction process will be performed on the segment and the resulting topics for each segment will be cached.
If the topic extraction system predicts a unique topic for the transcript (ie. it predicts a topic for the first time on a specific meeting transcript),
the API will send a callback containing the new topics in the following format:

.. code-block:: JSON

    {
        "meeting_id": Text,
        "sequence": int,
        "account_id": Text,
        "topics": List[Keywords]
    }
