.. _mr_tutorial:

==================================
Machine Reading API Tutorial
==================================

This tutorial will walk through how to use the Machine Reading API for question answering.

.. contents:: Table of Contents
    :local:
    :depth: 3

Introduction
============
The purpose of the Machine Reading system is to perform extractive question answering given a query and a context paragraph. We are currently using the system to answer queries to the bots using businesses' scraped Google Maps reviews. The result of running the Machine Reader with a context paragraph of reviews is text span containing the most likely answer and a confidence score.

The endpoint for the Machine Reading API is ``https://seachat-backstage.seasalt.ai/machine-reading``.

All of the following API calls can be viewed and tested with the `Swagger docs <https://seachat-backstage.seasalt.ai/machine-reading/docs#/>`_ for this API.

The current machine reading model is stored in the Azure fileshare at ``/mnt/models/nlp/machine_reading``.

Implementation
--------------

The Machine Reading system uses a `Distilbert model <https://huggingface.co/distilbert-base-uncased-distilled-squad>`_ fine-tuned on the Stanford Question Answering Dataset (`SQuAD <https://rajpurkar.github.io/SQuAD-explorer/>`_).

API Usage
=========

POST /answer
------------
To extract an answer to a given question from a context paragraph, send a POST request to the ``/answer`` endpoint.

.. code-block:: bash

    POST https://seachat-backstage.seasalt.ai/machine-reading/answer

The required request body contains a ``question`` and a ``context`` paragraph.

.. code-block:: JSON

    {
        "question": "where is seasalt.ai located?",
        "context": "seasalt.ai is a ai communication solutions start-up located in seattle, wa. their products include seachat, seavoice, seameet, and seax."
    }

.. IMPORTANT:: As the model is uncased, both the question and the context need to be lowercased.

.. NOTE:: The context paragraph cannot exceed 76163 characters.

A sucessful response will return an answer, which includes a ``score``, the ``start`` and ``end`` locations of the answer span, and the extracted ``answer``:

.. code-block:: JSON

    {
        "score": 0.9689902663230896,
        "start": 63,
        "end": 74,
        "answer": "seattle, wa"
    }
